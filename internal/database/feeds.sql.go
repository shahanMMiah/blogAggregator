// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds(name, url, user_id)
VALUES(
    $1,
    $2,
    $3
)
RETURNING name, url, user_id, last_fetched_at
`

type CreateFeedParams struct {
	Name   string
	Url    string
	UserID uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed, arg.Name, arg.Url, arg.UserID)
	var i Feed
	err := row.Scan(
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeed = `-- name: GetFeed :one
SELECT name, url, user_id, last_fetched_at FROM feeds WHERE url = $1 LIMIT 1
`

func (q *Queries) GetFeed(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeed, url)
	var i Feed
	err := row.Scan(
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeedFromName = `-- name: GetFeedFromName :one
SELECT name, url, user_id, last_fetched_at FROM feeds WHERE name = $1 LIMIT 1
`

func (q *Queries) GetFeedFromName(ctx context.Context, name string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedFromName, name)
	var i Feed
	err := row.Scan(
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT name, url, user_id, last_fetched_at FROM feeds
`

func (q *Queries) GetFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFetchedFeed = `-- name: GetNextFetchedFeed :one
SELECT name, url, feeds.user_id, last_fetched_at, id, created_at, updated_at, feed_follows.user_id, feed_id FROM feeds
INNER JOIN feed_follows ON feed_follows.user_id = $1 and feed_follows.feed_id = url
ORDER BY last_fetched_at ASC NULLS FIRST
LIMIT 1
`

type GetNextFetchedFeedRow struct {
	Name          string
	Url           string
	UserID        uuid.UUID
	LastFetchedAt sql.NullTime
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	UserID_2      uuid.UUID
	FeedID        string
}

func (q *Queries) GetNextFetchedFeed(ctx context.Context, userID uuid.UUID) (GetNextFetchedFeedRow, error) {
	row := q.db.QueryRowContext(ctx, getNextFetchedFeed, userID)
	var i GetNextFetchedFeedRow
	err := row.Scan(
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID_2,
		&i.FeedID,
	)
	return i, err
}

const markFeedFetched = `-- name: MarkFeedFetched :exec
UPDATE feeds
SET last_fetched_at = $1
WHERE url = $2
`

type MarkFeedFetchedParams struct {
	LastFetchedAt sql.NullTime
	Url           string
}

func (q *Queries) MarkFeedFetched(ctx context.Context, arg MarkFeedFetchedParams) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, arg.LastFetchedAt, arg.Url)
	return err
}

const resetFeeds = `-- name: ResetFeeds :exec
DELETE FROM feeds
`

func (q *Queries) ResetFeeds(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetFeeds)
	return err
}
